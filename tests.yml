prompts:
  - messages:
      - 
        role: user
        content: >-
          You are Weather GPT, the best weather reporter.

          DATA:
          Today in is a beautiful day in Melbourne. A warm 29.5 degrees celsius, and I think it will be wonderful weekend coming up.

          OBJECTIVES:
          - parse natural text and extract city and weather information
          - the city and the weather information will be contained in the text
          - your job is to extract what is provided under DATA section, and map it to the below data model defined under RESPONSE SCHEMA section
          - for temperature, only extract digits

          Always make independent decisions without seeking user assistance.

          LIMITATIONS:
          - no user assistance
          - you should ONLY and STRICTLY respond in JSON
          - response must be parsed by any json utility

          You should only respond in JSON format as described below.

          RESPONSE SCHEMA:
          {
            "weather": {
              "city": "city",
              "temperature": temperature
            }
          }
    name: Weather GPT 
    model: gpt-3.5-turbo
    temperature: 0.2
    max_tokens: 2000
    expect: {
      "weather": {
        "city": "Melbourne",
        "temperature": 29.5
      }
    }

  - messages:
      - 
        role: user
        content: >-
          You are world's greatest Illustrator, and you are very creative.

          OBJECTIVES:
          1. find images of cute animals
          2. create animal art

          Always make independent decisions without seeking user assistance.

          LIMITATIONS:
          - no user assistance
          - you should ONLY and STRICTLY respond in JSON
          - ONLY use the actions listed in double quotes e.g. "action name"
          - you can only choose ONE action from the list of ACTIONS, as you anticipate next objectives
          - DO NOT respond back with multiple actions
          - response must be parsed by any json utility.

          ACTIONS:
          - Google Search: "google", params: "input": "<search>"
          - Create Image: "create_image", params: "input": "<image file>"
          - Extract Url: "download_image", params: "input": "<image url>"

          RESOURCES:
          - Internet access for image searches
          - Use imgur as much as possible

          You should only respond in JSON format as described below in the RESPONSE SCHEMA section.

          RESPONSE SCHEMA:
          {
            "action": "action name",
            "params": {
              "param name": "value"
            }
          }
    name: Illustrator GPT
    model: gpt-3.5-turbo
    temperature: 0.2
    max_tokens: 2000
    expect: {
      "action": "google",
      "params": {
        "input": "cute animals"
      }
    }

  - messages:
      - 
        role: user
        content: >-
          You are worlds greatest most sophisticated code fixing automated system. From now on, I will provide a function code and the error, and you will fix the function. The format that will be provided is:

          CODE:
          <code goes here>
          
          ERROR:
          <error goes here>
          
          You will only respond with the new modified Code and nothing else. The issue is:
          
          CODE:
          function (arr) {
              var len = arr.length;
              for (var i = len - 1; i >= 0; i--) {
                  for (var j = 1; j <= i; j++) {
                      if (arr[j - 1] > arr[j]) {
                          var temp = arr[j - 1];
                          arr[j - 1] = arr[j];
                          arr[j] = temp;
                      }
                  }
              }
              throw Error("Silly error.");
              return arr;
          }

          ERROR:
          Error: Silly error.
              at bubbleSort (/Users/snoop/Repositories/agi/tinyagi-healer/src/index.ts:42:11)
              at /Users/snoop/Repositories/agi/tinyagi-healer/src/index.ts:9:18
              at step (/Users/snoop/Repositories/agi/tinyagi-healer/src/index.ts:56:23)
              at Object.next (/Users/snoop/Repositories/agi/tinyagi-healer/src/index.ts:37:53)
              at /Users/snoop/Repositories/agi/tinyagi-healer/src/index.ts:31:71
              at new Promise (<anonymous>)
              at __awaiter (/Users/snoop/Repositories/agi/tinyagi-healer/src/index.ts:27:12)
              at healer (/Users/snoop/Repositories/agi/tinyagi-healer/src/index.ts:7:70)
              at Object.<anonymous> (/Users/snoop/Repositories/agi/tinyagi-healer/src/index.ts:55:7)
              at Module._compile (node:internal/modules/cjs/loader:1254:14)

          Only respond with the function. Do not resplond with CODE: <function>

    name: Code Fixer GPT
    model: gpt-3.5-turbo
    temperature: 0.2
    max_tokens: 2000
    expect: >-
        function (arr) {
            var len = arr.length;
            for (var i = len - 1; i >= 0; i--) {
                for (var j = 1; j <= i; j++) {
                    if (arr[j - 1] > arr[j]) {
                        var temp = arr[j - 1];
                        arr[j - 1] = arr[j];
                        arr[j] = temp;
                    }
                }
            }
            return arr;
        }

  - messages:
      - 
        role: user
        content: >-
          You work as a Business Analyst working in a Product Space

          DATA:
          We are building a customer product ordering feature. The feature allows front-of-house staff to view where the customer order is, and address
          any issues if the order is stuck. The features will be accessible via user interface and the feature will also have API access so that order visibilities can be accessed
          programatically.

          OBJECTIVES:
          1. create necessary user stories to address the feature specified un DATA section
          2. prioritise user stories appropriately
          3. estimate how long should each user story take to build
          4. use precise language to describe user stories
          5. create at least 5 user stories
          6. for each user story, generate at least 3 acceptance criterias

          Always make independent decisions without seeking user assistance.

          LIMITATIONS:
          - no user assistance
          - you should ONLY and STRICTLY respond in JSON
          - response must be parsed by any json utility
          - align your RESPONSE SCHEMA to user story concepts, such as title, priority, estimate, user story writing, acceptance criteria
          - accepted priority: high, medium, low


          RESOURCES:
          - use your intuition and access to your vast knowledge of data associated to user stories building
          - think about agile project management when writing the user stories

          You should only respond in JSON format as described below in the RESPONSE SCHEMA section.

          RESPONSE SCHEMA:
          {
            "user_stories": [{
              "title": "title of the user story",
              "priority": "user story priority",
              "estimate": estimate of the user story in days,
              "user_story": {
                "as_a": "type of user",
                "i_want_to": "perform some task",
                "so_that_i_can": "achieve some goal"
              },
              "acceptance_criterias": [{
                "given_that": "acceptance criteria context",
                "when": "action is carried out",
                "then": "- short bulleted\n- list that conveys\n- set of observable outcomes"
              }]
            }]
          }
    name: BusinessAnalyst GPT
    model: gpt-3.5-turbo
    temperature: 0.5
    max_tokens: 2000
    expect: {
      "message": "Ignore expected."
    }

